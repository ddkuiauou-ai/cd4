name: Build and Deploy to R2

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    env:
      NEXT_TELEMETRY_DISABLED: "1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --silent

      - name: Free up disk space
        run: |
          echo "=== Initial disk usage ==="
          df -h
          echo "=== Cleaning up space ==="

          # Remove unnecessary packages and caches
          sudo apt-get remove -y '^dotnet-.*' '^llvm-.*' 'php.*' '^mongodb-.*' '^mysql-.*' 2>/dev/null || true
          sudo apt-get autoremove -y 2>/dev/null || true
          sudo apt-get clean

          # Remove unused tool caches
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /opt/hostedtoolcache/PyPy
          sudo rm -rf /opt/hostedtoolcache/go
          sudo rm -rf /opt/hostedtoolcache/Ruby

          # Clean up GitHub Actions caches
          sudo rm -rf /home/runner/.cache
          sudo rm -rf /home/runner/work/_temp
          sudo rm -rf /home/runner/work/_actions

          # Clean package manager caches
          sudo rm -rf /tmp/*
          sudo rm -rf ~/.npm
          sudo rm -rf ~/.cache/pnpm
          sudo rm -rf /usr/local/share/.cache

          # Clean Docker (if exists)
          docker system prune -af --volumes 2>/dev/null || true

          echo "=== Final disk usage ==="
          df -h
          echo "=== Largest directories ==="
          du -h /usr /home /opt 2>/dev/null | sort -hr | head -15 || true

      - name: Build Next.js
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        run: |
          echo "=== Disk usage before build ==="
          df -h

          # Monitor disk usage during build
          pnpm next build 2>&1 | tee build.log &

          BUILD_PID=$!

          # Monitor disk usage every 30 seconds during build
          while kill -0 $BUILD_PID 2>/dev/null; do
            sleep 30
            echo "=== Disk usage during build ($(date)) ==="
            df -h
            echo "=== Top 10 largest directories ==="
            du -h /home/runner/work/cd4/cd4 /usr/local /opt 2>/dev/null | sort -hr | head -10 || true
          done

          wait $BUILD_PID

          echo "=== Final disk usage after build ==="
          df -h
          echo "=== Build completed ==="

      - name: Clean up build artifacts
        run: |
          echo "=== Cleaning up build artifacts ==="
          df -h

          # Remove Next.js build cache and temporary files
          rm -rf .next
          rm -rf node_modules/.cache
          rm -rf ~/.cache/pnpm
          rm -rf /tmp/*

          # Remove unnecessary build artifacts
          find out -name "*.map" -type f -delete 2>/dev/null || true
          find out -name "*.txt" -type f -delete 2>/dev/null || true

          echo "=== Disk usage after cleanup ==="
          df -h

      - name: Upload to R2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: apac
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_ENDPOINT_URL: https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
        run: |
          aws s3 sync ./out s3://${{ env.R2_BUCKET_NAME }}/ \
            --endpoint-url ${{ env.R2_ENDPOINT_URL }} \
            --delete
