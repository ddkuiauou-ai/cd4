"use client";

import React, { useRef, useEffect } from 'react';
import * as d3 from "d3";

type Price = {
  securityId?: string;
  open?: number;
  close: number;
};

type Props = {
  width?: number;
  height?: number;
  prices?: Price[];
  data?: [number, number][];
  rate?: number;
};

function SpikeChart({ width = 300, height = 100, prices, data, rate }: Props) {
  const ref = useRef<SVGSVGElement>(null);

  let chartData: [number, number][] = [];
  let isPositive = false;
  let suspend = false;

  if (rate !== undefined) {
    isPositive = rate >= 0;
  }

  if (data) {
    chartData = data;
    if (rate === undefined && data.length >= 2) {
      const lastValue = data[data.length - 1][1];
      const previousValue = data[data.length - 2][1];
      isPositive = lastValue >= previousValue;
    }
  } else if (prices && prices.length > 0) {
    chartData = prices.map((price, index) => [index, price.close]);
    if (rate === undefined && prices.length >= 2) {
      const lastPrice = prices[prices.length - 1]?.close ?? 0;
      const previousPrice = prices[prices.length - 2]?.close ?? lastPrice;
      isPositive = lastPrice >= previousPrice;
    }
    suspend = prices[prices.length - 1]?.open === 0;
  } else {
    chartData = [];
  }

  const color = isPositive ? "#FF0054" : "#390099";

  const suspendSvg = `<svg width="53.126" height="100%" viewBox="0 0 53.126 13.89" xmlns="http://www.w3.org/2000/svg"><g id="svgGroup" stroke-linecap="round" fill-rule="evenodd" font-size="9pt" stroke="#6b7280" stroke-width="0.20mm" fill="#000" style="stroke:#6b7280;stroke-width:0.20mm;fill:#000"><path d="M 22.526 0.465 L 22.526 5.67 L 24.431 5.67 L 24.431 0.21 Q 24.431 0.043 24.563 0.009 A 0.309 0.309 0 0 1 24.641 0 L 25.211 0 Q 25.377 0 25.412 0.132 A 0.309 0.309 0 0 1 25.421 0.21 L 25.421 13.62 Q 25.421 13.787 25.289 13.821 A 0.309 0.309 0 0 1 25.211 13.83 L 24.641 13.83 Q 24.474 13.83 24.44 13.698 A 0.309 0.309 0 0 1 24.431 13.62 L 24.431 6.57 L 22.526 6.57 L 22.526 13.05 Q 22.526 13.217 22.394 13.251 A 0.309 0.309 0 0 1 22.316 13.26 L 21.746 13.26 Q 21.579 13.26 21.545 13.128 A 0.309 0.309 0 0 1 21.536 13.05 L 21.536 0.465 Q 21.536 0.298 21.668 0.264 A 0.309 0.309 0 0 1 21.746 0.255 L 22.316 0.255 Q 22.482 0.255 22.517 0.387 A 0.309 0.309 0 0 1 22.526 0.465 Z M 13.991 9.15 L 13.991 6.285 A 2.359 2.359 0 0 1 14.007 6 Q 14.055 5.602 14.253 5.438 Q 14.477 5.252 14.999 5.225 A 3.644 3.644 0 0 1 15.191 5.22 L 18.071 5.22 A 1.152 1.152 0 0 0 18.156 5.217 Q 18.294 5.207 18.341 5.16 Q 18.401 5.1 18.401 4.875 L 18.401 2.475 Q 18.401 2.27 18.357 2.202 A 0.1 0.1 0 0 0 18.348 2.19 Q 18.3 2.134 18.114 2.13 A 1.358 1.358 0 0 0 18.086 2.13 L 14.261 2.13 A 0.249 0.249 0 0 1 14.132 2.094 A 0.306 0.306 0 0 1 14.118 2.085 Q 14.051 2.04 14.051 1.965 L 14.051 1.395 A 0.134 0.134 0 0 1 14.098 1.291 A 0.188 0.188 0 0 1 14.118 1.275 Q 14.186 1.23 14.261 1.23 L 18.251 1.23 A 4.12 4.12 0 0 1 18.463 1.235 Q 18.572 1.241 18.665 1.253 A 1.691 1.691 0 0 1 18.836 1.283 A 1.028 1.028 0 0 1 19.004 1.336 Q 19.116 1.384 19.196 1.455 A 0.558 0.558 0 0 1 19.327 1.632 Q 19.362 1.704 19.383 1.793 Q 19.424 1.959 19.433 2.183 A 3.385 3.385 0 0 1 19.436 2.325 L 19.436 5.055 A 2.359 2.359 0 0 1 19.42 5.34 Q 19.371 5.739 19.173 5.903 Q 18.952 6.086 18.435 6.115 A 3.624 3.624 0 0 1 18.236 6.12 L 15.341 6.23 L 15.341 9.15 A 2.359 2.359 0 0 1 15.325 9.435 Q 15.276 9.834 15.078 9.998 Q 14.858 10.181 14.341 10.21 A 3.624 3.624 0 0 1 14.141 10.215 L 11.246 10.215 A 1.152 1.152 0 0 0 11.161 10.22 Q 11.024 10.23 10.976 10.275 Q 10.916 10.335 10.916 10.56 L 10.916 12.96 Q 10.916 13.165 10.961 13.233 A 0.1 0.1 0 0 0 10.97 13.245 Q 11.016 13.3 11.201 13.305 A 1.358 1.358 0 0 0 11.229 13.305 L 15.054 13.305 A 0.249 0.249 0 0 1 15.184 13.341 A 0.306 0.306 0 0 1 15.198 13.35 Q 15.266 13.395 15.266 13.47 L 15.266 14.04 A 0.134 0.134 0 0 1 15.219 14.144 A 0.188 0.188 0 0 1 15.198 14.16 Q 15.131 14.205 15.05 metabolismo L 11.061 14.205 A 4.12 4.12 0 0 1 10.849 14.2 Q 10.74 14.194 10.646 14.182 A 1.691 1.691 0 0 1 10.476 14.152 A 1.028 1.028 0 0 1 10.309 14.099 Q 10.196 14.051 10.116 13.98 A 0.558 0.558 0 0 1 9.986 13.803 Q 9.951 13.731 9.93 13.642 Q 9.889 13.476 9.88 13.252 A 3.385 3.385 0 0 1 9.877 13.11 L 9.877 10.38 A 2.359 2.359 0 0 1 9.893 10.095 Q 9.941 9.696 10.14 9.532 Q 10.36 9.35 10.877 9.32 A 3.624 3.624 0 0 1 11.076 9.315 L 13.991 9.315 Z M 33.136 0.465 L 33.136 5.67 L 35.041 5.67 L 35.041 0.21 Q 35.041 0.043 35.173 0.009 A 0.309 0.309 0 0 1 35.251 0 L 35.821 0 Q 35.987 0 36.022 0.132 A 0.309 0.309 0 0 1 36.031 0.21 L 36.031 13.62 Q 36.031 13.787 35.899 13.821 A 0.309 0.309 0 0 1 35.821 13.83 L 35.251 13.83 Q 35.084 13.83 35.05 13.698 A 0.309 0.309 0 0 1 35.041 13.62 L 35.041 6.57 L 33.136 6.57 L 33.136 13.05 Q 33.136 13.217 33.004 13.251 A 0.309 0.309 0 0 1 32.926 13.26 L 32.356 13.26 Q 32.189 13.26 32.155 13.128 A 0.309 0.309 0 0 1 32.146 13.05 L 32.146 0.465 Q 32.146 0.298 32.278 0.264 A 0.309 0.309 0 0 1 32.356 0.255 L 32.926 0.255 Q 33.092 0.255 33.127 0.387 A 0.309 0.309 0 0 1 33.136 0.465 Z M 44.331 0.465 L 44.331 5.67 L 46.236 5.67 L 46.236 0.21 Q 46.236 0.043 46.368 0.009 A 0.309 0.309 0 0 1 46.446 0 L 47.016 0 Q 47.182 0 47.217 0.132 A 0.309 0.309 0 0 1 47.226 0.21 L 47.226 13.62 Q 47.226 13.787 47.094 13.821 A 0.309 0.309 0 0 1 47.016 13.83 L 46.446 13.83 Q 46.279 13.83 46.245 13.698 A 0.309 0.309 0 0 1 46.236 13.62 L 46.236 6.57 L 44.331 6.57 L 44.331 13.05 Q 44.331 13.217 44.2 13.251 A 0.309 0.309 0 0 1 44.121 13.26 L 43.551 13.26 Q 43.384 13.26 43.35 13.128 A 0.309 0.309 0 0 1 43.341 13.05 L 43.341 0.465 Q 43.341 0.298 43.473 0.264 A 0.309 0.309 0 0 1 43.551 0.255 L 44.121 0.255 Q 44.287 0.255 44.322 0.387 A 0.309 0.309 0 0 1 44.331 0.465 Z M 5.246 0.465 L 5.246 13.05 Q 5.246 13.217 5.114 13.251 A 0.309 0.309 0 0 1 5.036 13.26 L 4.466 13.26 Q 4.299 13.26 4.265 13.128 A 0.309 0.309 0 0 1 4.256 13.05 L 4.256 0.465 Q 4.256 0.298 4.388 0.264 A 0.309 0.309 0 0 1 4.466 0.255 L 5.036 0.255 Q 5.202 0.255 5.237 0.387 A 0.309 0.309 0 0 1 5.246 0.465 Z M 0.611 0.465 L 0.611 13.05 Q 0.611 13.217 0.479 13.251 A 0.309 0.309 0 0 1 0.401 13.26 L -0.169 13.26 Q -0.336 13.26 -0.37 13.128 A 0.309 0.309 0 0 1 -0.379 13.05 L -0.379 0.465 Q -0.379 0.298 -0.247 0.264 A 0.309 0.309 0 0 1 -0.169 0.255 L 0.401 0.255 Q 0.567 0.255 0.602 0.387 A 0.309 0.309 0 0 1 0.611 0.465 Z M 52.516 0.465 L 52.516 13.05 Q 52.516 13.217 52.384 13.251 A 0.309 0.309 0 0 1 52.306 13.26 L 51.736 13.26 Q 51.569 13.26 51.535 13.128 A 0.309 0.309 0 0 1 51.526 13.05 L 51.526 0.465 Q 51.526 0.298 51.658 0.264 A 0.309 0.309 0 0 1 51.736 0.255 L 52.306 0.255 Q 52.472 0.255 52.507 0.387 A 0.309 0.309 0 0 1 52.516 0.465 Z M 28.531 0.465 L 28.531 13.05 Q 28.531 13.217 28.4 13.251 A 0.309 0.309 0 0 1 28.321 13.26 L 27.751 13.26 Q 27.584 13.26 27.55 13.128 A 0.309 0.309 0 0 1 27.541 13.05 L 27.541 0.465 Q 27.541 0.298 27.673 0.264 A 0.309 0.309 0 0 1 27.751 0.255 L 28.321 0.255 Q 28.487 0.255 28.522 0.387 A 0.309 0.309 0 0 1 28.531 0.465 Z M 39.716 0.465 L 39.716 13.05 Q 39.716 13.217 39.584 13.251 A 0.309 0.309 0 0 1 39.506 13.26 L 38.936 13.26 Q 38.769 13.26 38.735 13.128 A 0.309 0.309 0 0 1 38.726 13.05 L 38.726 0.465 Q 38.726 0.298 38.858 0.264 A 0.309 0.309 0 0 1 38.936 0.255 L 39.506 0.255 Q 39.672 0.255 39.707 0.387 A 0.309 0.309 0 0 1 39.716 0.465 Z</g></svg>`;

  useEffect(() => {
    if (ref.current && chartData.length > 0) {
      const svg = d3.select(ref.current);
      svg.selectAll("*").remove();

      const x = d3.scaleLinear().domain([0, chartData.length]).range([0, width!]);
      const y = d3
        .scaleLinear()
        .domain([
          d3.min(chartData, (d) => d[1])! * 0.95,
          d3.max(chartData, (d) => d[1])! * 1.05,
        ])
        .range([height!, 0]);

      const line = d3
        .line()
        .x((d: any) => x(d[0]))
        .y((d: any) => y(d[1]));

      svg
        .append("path")
        .attr("class", "line")
        .attr("d", line(chartData as any))
        .attr("fill", "none")
        .attr("stroke", suspend ? "#6b7280" : color)
        .style("stroke-width", 1);

      if (suspend) {
        svg
          .append("foreignObject")
          .attr("width", 53.126)
          .attr("height", 13.89)
          .attr("x", (width! - 53.126) / 2)
          .attr("y", (height! - 13.89) / 2)
          .html(() => suspendSvg);
      } else {
        const lastData = chartData[chartData.length - 1];
        if (lastData) {
          svg
            .append("ellipse")
            .attr("cx", x(lastData[0]))
            .attr("cy", y(lastData[1]))
            .attr("rx", 4)
            .attr("ry", 4)
            .attr("fill", "none")
            .attr("stroke", color)
            .style("stroke-width", 1)
            .style("stroke-dasharray", "1,1");
        }
      }
    }
  }, [chartData, width, height, rate, suspend, color, suspendSvg]);

  return <svg ref={ref} width={width} height={height} />;
}

export default React.memo(SpikeChart);